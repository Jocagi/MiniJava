Program’  ::=   	Program
Program ::=		Decl
Decl ::=		FunctionDecl Decl’
Decl ::=		ClassDecl Decl’
Decl ::= 		InterfaceDecl  Decl’
Decl ::=		VariableDecl  Decl’
Decl’ ::=		Decl
Decl’ ::=		ε
VariableDecl ::=	Variable ;
Variable ::= 		Type  ident
Type ::= 		int
Type ::=		double
Type ::=		boolean
Type ::=		string
Type ::=	 	ident
Type ::=		Type  [ ]
FunctionDecl ::=	Type ident ( Formals ) StmtBlock
FunctionDecl ::=	void ident ( Formals ) StmtBlock
Formals ::= 		Variable , Formals
Formals ::=		Variable
ClassDecl ::= 		class ident ClassDecl1 classDecl2  { Field }
ClassD	ecl1  ::=	extends ident
ClassD	ecl1  ::=	ε
ClassDecl2 ::=    	implements ident ClassDecl3
ClassDecl2 ::=            ε
ClassDecl3 ::=		, ident ClassDecl3
ClassDecl3::=		ε
Field ::=	 	VariableDecl Field
Field ::=		InterfaceDecl  Field
Field ::=		ε
InterfaceDecl ::= 	interface ident { Prototype }
Prototype ::= 		Type ident ( Formals ) ;  Prototype
Prototype ::=		void ident ( Formals ) ;   Prototype
Prototype ::=		ε
StmtBlock ::= 		{ StmtBlock1 StmtBlock2 }
StmtBlock1 ::= 	VariableDecl StmtBlock1
StmtBlock1 ::= 	ε
StmtBlock2 ::=		Stmt StmtBlock2
StmtBlock2 ::=		ε
Stmt ::= 		;
Stmt ::= 		 Expr ;
Stmt ::=		IfStmt
Stmt ::=		WhileStmt
Stmt ::=		ForStmt
Stmt ::=		BreakStmt
Stmt ::=		ReturnStmt
Stmt ::=		PrintStmt
Stmt ::=		StmtBlock
IfStmt ::= 		if ( Expr ) Stmt ElseStmt
ElseStmt ::=		else Stmt
ElseStmt ::=		ε
WhileStmt ::= 		while ( Expr ) Stmt
ForStmt ::= 		for ( Expr  ; Expr ; Expr ) Stmt
ReturnStmt ::= 	return Expr  ;
BreakStmt ::= 		break ;
PrintStmt ::= 		System.out.println ( PrintStmt2 ) ;
PrintStmt2::=		Expr  PrintStmt3
PrintStmt3::=		, Expr  PrintStmt3
PrintStmt3::=		ε
Expr ::= 		LValue = RValue
RValue ::= 		New ( ident )
RValue ::=		Expr
Expr ::= 		this
Expr ::= 		ExprLogi
Expr ::= 		- Expr
Expr ::= 		! Expr
ExprLogi ::=		ExprDiv
ExprLogi ::=		Expr > ExprLogi
ExprLogi ::=		Expr >= ExprLogi
ExprLogi ::=		Expr != ExprLogi
ExprLogi ::=		Expr || ExprLogi
ExprDiv ::=		ExprMin
ExprDiv ::=		Expr % ExprMin
ExprDiv ::=		Expr  / ExprMin
ExprMin ::= 		Factor  - ExprMin
ExprMin ::=		Factor
Factor ::=		Constant
Factor ::=		LValue
Factor ::=		( Expr  )
LValue ::= 		ident
LValue ::=		Expr  . ident
Constant ::=		static int intConstant
Constant ::= 		static double doubleConstant
Constant ::=		static bool boolConstant
Constant ::=   		static string stringConstant
Constant ::=		null
